@using AM.Model.Enums
@model AM.Web.Models.UniversalViewModel
@{ Layout = null; }

<style>
    .color-red {
        color: red;
    }

    .color-green {
        color: green;
    }

    .form-container hr {
        width: 80%;
    }

    .t-row {
        display: flex;
        flex-direction: row;
        margin-bottom: 20px;
        justify-content: center;
    }

        .t-row:last-child {
            display: flex;
            flex-direction: column;
        }

    input[type=password] {
        width: 100%;
    }

    .left-col {
        align-items: center;
        width: 40%;
        justify-content: flex-end;
        padding-left: 60px;
    }

    .right-col {
        width: 40%;
        align-self: center;
        padding-left: 40px;
    }

    .center-col {
        text-align: center;
    }
</style>

@using (Html.BeginForm("ChangePassword", "Users", new { area = "" })) {
    

    

    <div class="form-container">

        <div class="t-row">
            <div class="left-col">
                <div class="form-group">
                    <label class="control-label">Set New Password</label>
                    @*@Html.LabelFor(m => m.Password, new { @class = "col-md-2 control-label" })*@
                    <div class="">
                        @Html.PasswordFor(m => m.Password, new { @class = "form-control" })
                    </div>
                </div>
            </div>
            <div class="right-col">
                <i id="pass-upper" class="fas fa-times color-red"></i> Minimum 1 Uppercase<br />
                <i id="pass-lower" class="fas fa-times color-red"></i> Minimum 1 Lowercase<br />
                <i id="pass-number" class="fas fa-times color-red"></i> Minimum 1 Number<br />
                <i id="pass-character" class="fas fa-times color-red"></i> Minimum 1 Special Character<br />
                <i id="pass-length" class="fas fa-times color-red"></i> Minimum 8 Characters Long<br />
            </div>
        </div>
        <hr />
        <div class="t-row">
            <div class="left-col">
                <div class="form-group">
                    <label class="control-label">Confirm New Password</label>
                    @*@Html.LabelFor(m => m.Password, new { @class = "col-md-2 control-label" })*@
                    <div class="">
                        @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control" })
                    </div>
                </div>
            </div>
            <div class="right-col">
                <i id="confirmPass-upper" class="fas fa-times color-red"></i> Minimum 1 Uppercase<br />
                <i id="confirmPass-lower" class="fas fa-times color-red"></i> Minimum 1 Lowercase<br />
                <i id="confirmPass-number" class="fas fa-times color-red"></i> Minimum 1 Number<br />
                <i id="confirmPass-character" class="fas fa-times color-red"></i> Minimum 1 Special Character<br />
                <i id="confirmPass-length" class="fas fa-times color-red"></i> Minimum 8 Characters Long<br />
            </div>
        </div>


        <hr />
        <div class="t-row">
            <div class="center-col">

                <div class="form-group">
                    <button id="submit-new-password" type="button" class="btn btn-primary" disabled>Set Password</button>
                </div>

            </div>
        </div>
    </div>


}

<script>
        let pComplete = false;
        let cPComplete = false;
        let match = false;

        let pattern = {
            upper: /(?=.*?[A-Z])/,
            lower: /(?=.*?[a-z])/,
            number: /(?=.*?[0-9])/,
            character: /(?=.*?[#?!@@$%^&*-])/,
            length: /^.{8,}/,
            all: /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@@$%^&*-]).{8,}$/
        };

        let iconChange = function (testCase, val, type) {
            if (testCase.test($("#" + type).val())) {
                $("#" + val).addClass("color-green fa-check").removeClass("color-red fa-times");
            } else {
                $("#" + val).addClass("color-red fa-times").removeClass("color-green fa-check");
            }
        };

        let completeCheck = function () {
            if (pComplete && cPComplete && $("#Password").val() === $("#ConfirmPassword").val()) {
                $("#submit-new-password").prop('disabled', false);
            } else {
                $("#submit-new-password").prop('disabled', true);
            }

            return;
        };

        $("#Password").on("keyup", function (k) {
            iconChange(pattern.upper, "pass-upper", "Password");
            iconChange(pattern.lower, "pass-lower", "Password");
            iconChange(pattern.number, "pass-number", "Password");
            iconChange(pattern.character, "pass-character", "Password");
            iconChange(pattern.length, "pass-length", "Password");

            if (pattern.all.test($("#Password").val())) {
                pComplete = true;
            } else {
                cPComplete = false;
            }

            completeCheck();
        });

        $("#ConfirmPassword").on("keyup", function (k) {
            iconChange(pattern.upper, "confirmPass-upper", "ConfirmPassword");
            iconChange(pattern.lower, "confirmPass-lower", "ConfirmPassword");
            iconChange(pattern.number, "confirmPass-number", "ConfirmPassword");
            iconChange(pattern.character, "confirmPass-character", "ConfirmPassword");
            iconChange(pattern.length, "confirmPass-length", "ConfirmPassword");

            if (pattern.all.test($("#ConfirmPassword").val())) {
                cPComplete = true;
            } else {
                cPComplete = false;
            }

            completeCheck();
        });

    $("#submit-new-password").on("click", function () {
            var data = {
                Guid: $("#Guid").val(),
                Password: $("#Password").val(),
                ConfirmPassword: $("#ConfirmPassword").val(),
                ViewingPage: "@ViewingPage.UserChangePassword"
            };

            $.ajax({
                type: 'POST',
                url: '@Url.Action("ChangePassword", "Users", new { area = "" })',
                data: data,
                //dataType: "json",
                cache: false,
                success: function (result) {
                    //if (typeof (result) === "object") {     // JSON
                    if (!result.IsSuccess) {
                        if (result.StatusMsg !== null &&
                            result.StatusMsg !== "")
                             toastr.warning(result.StatusMsg);
                        else
                            toastr.warning("AJAX ERROR: There was a problem processing your request.");

                    } else {
                        //document.location.href = result.RedirectUrl;
                        $("#edit-body").removeClass("blur");
                        $("#edit-password-popup").hide();
                        toastr.success("Password has been changed!");
                    }
                    //} else {                                // HTML
                    //    //$("#profile-listing").fadeOut().find("tbody").empty().append(result).promise().done(function () {
                    //    //});
                    //}
                },
                fail: function (result) {

                    if (result.StatusMsg !== null &&
                        result.StatusMsg !== "")
                        toastr.warning(result.StatusMsg);
                    else
                        toastr.warning("AJAX ERROR: There was a problem processing your request.");
                }
            });
            return false;
        });
</script>
